[gd_scene load_steps=37 format=3 uid="uid://gkex5f5q7y0i"]

[ext_resource type="Texture2D" uid="uid://bi0w1mbpr5b7r" path="res://enemies/Crow_Animations/attack/1.png" id="1_q7yxd"]
[ext_resource type="Texture2D" uid="uid://sr5wymbr6130" path="res://enemies/Crow_Animations/attack/2.png" id="2_ylfv4"]
[ext_resource type="Texture2D" uid="uid://df4nwxoqnk7it" path="res://enemies/Crow_Animations/attack/3.png" id="3_k3021"]
[ext_resource type="Texture2D" uid="uid://cuhxgst56gw11" path="res://enemies/Crow_Animations/attack/4.png" id="4_x6d8k"]
[ext_resource type="Texture2D" uid="uid://cs37qqqmtq1dh" path="res://enemies/Crow_Animations/attack/5.png" id="5_wm0mg"]
[ext_resource type="Texture2D" uid="uid://jnd42ujpejnv" path="res://enemies/Crow_Animations/dealth/1.png" id="6_b8emp"]
[ext_resource type="Texture2D" uid="uid://dwvex2omeufc6" path="res://enemies/Crow_Animations/dealth/2.png" id="7_i4mw0"]
[ext_resource type="Texture2D" uid="uid://b85jsogpme7jd" path="res://enemies/Crow_Animations/dealth/3.png" id="8_qqmo1"]
[ext_resource type="Texture2D" uid="uid://bsa20ljmplfkp" path="res://enemies/Crow_Animations/dealth/4.png" id="9_fr7mf"]
[ext_resource type="Texture2D" uid="uid://cq7wbxh3lt55o" path="res://enemies/Crow_Animations/dealth/5.png" id="10_5xaq3"]
[ext_resource type="Texture2D" uid="uid://dfg6vh1bne0p8" path="res://enemies/Crow_Animations/damage/1.png" id="11_qwx3j"]
[ext_resource type="Texture2D" uid="uid://bfaf65444syji" path="res://enemies/Crow_Animations/damage/2.png" id="12_vhb0b"]
[ext_resource type="Texture2D" uid="uid://yh7xybulnw28" path="res://enemies/Crow_Animations/damage/3.png" id="13_ryacq"]
[ext_resource type="Texture2D" uid="uid://curshr2hcwjya" path="res://enemies/Crow_Animations/iddle/1.png" id="14_fotv0"]
[ext_resource type="Texture2D" uid="uid://bkmccrwqr7dtf" path="res://enemies/Crow_Animations/iddle/2.png" id="15_hn13c"]
[ext_resource type="Texture2D" uid="uid://cyhesrxv0ktxj" path="res://enemies/Crow_Animations/iddle/3.png" id="16_nn4lk"]
[ext_resource type="Texture2D" uid="uid://sr1htgdkenpj" path="res://enemies/Crow_Animations/iddle/4.png" id="17_hi1yf"]
[ext_resource type="Texture2D" uid="uid://c0l0tbxawf71e" path="res://enemies/Crow_Animations/jump/1.png" id="18_tq22t"]
[ext_resource type="Texture2D" uid="uid://dvc51hd5qetnt" path="res://enemies/Crow_Animations/jump/2.png" id="19_tkfor"]
[ext_resource type="Texture2D" uid="uid://d3aqlpm6sh332" path="res://enemies/Crow_Animations/jump/3.png" id="20_fycgf"]
[ext_resource type="Texture2D" uid="uid://dl4ge2kj6ti0x" path="res://enemies/Crow_Animations/jump/4.png" id="21_1cxax"]
[ext_resource type="Texture2D" uid="uid://d10ulnsq5ek6p" path="res://enemies/Crow_Animations/jump/5.png" id="22_6h4t2"]
[ext_resource type="Texture2D" uid="uid://perfwaccuia3" path="res://enemies/Crow_Animations/jump/6.png" id="23_vagby"]
[ext_resource type="Texture2D" uid="uid://rhfr2pv0a1sg" path="res://enemies/Crow_Animations/walk/1.png" id="24_bh1vv"]
[ext_resource type="Texture2D" uid="uid://d1lh3i138ow1d" path="res://enemies/Crow_Animations/supercharge/1.png" id="24_ylfv4"]
[ext_resource type="Texture2D" uid="uid://bos8w6ad870bu" path="res://enemies/Crow_Animations/walk/2.png" id="25_qkccf"]
[ext_resource type="Texture2D" uid="uid://dk3jugk2eetlv" path="res://enemies/Crow_Animations/walk/3.png" id="26_otdhl"]
[ext_resource type="Texture2D" uid="uid://b1xvlwfpo0lf5" path="res://enemies/Crow_Animations/walk/4.png" id="27_g2kfy"]
[ext_resource type="AudioStream" uid="uid://bdix4fxx5xxnj" path="res://Sound Effects/general/hit.wav" id="28_2bl2v"]
[ext_resource type="AudioStream" uid="uid://cu703jgignuy6" path="res://Sound Effects/general/monster_attack.mp3" id="29_mkmmk"]
[ext_resource type="AudioStream" uid="uid://cm1y3gk3nr22o" path="res://Sound Effects/general/monster_sfx_pack/monster-8.wav" id="30_eo6x7"]

[sub_resource type="GDScript" id="GDScript_4g3ns"]
script/source = "extends CharacterBody2D

# (As variáveis @export não mudaram, então foram omitidas aqui para economizar espaço)
# ... cole suas variáveis @export aqui ...
@export_group(\"Stats\")
@export var max_health: int = 50
@export var move_speed: float = 80.0
@export var gravity: float = 2000.0
@export var base_attack_damage: int = 10 

@export_group(\"Combat\")
@export var attack_range: float = 250.0
@export var attack_cooldown: float = 0.35

@export_group(\"Stun\")
@export var hits_for_stun: int = 3
@export var stun_duration: float = 3.0
@export var consecutive_hit_window: float = 1.0
@export var stun_immunity_duration: float = 5.0

@export_group(\"Misc\")
@export var friction: float = 0.8
@export var vertical_knockback_factor: float = 0.3
@export var separation_distance: float = 80.0
@export var separation_strength: float = 350.0
@export var detection_range: float = 400.0


var health: int
enum State { IDLE, CHASE, ATTACK, HURT, STUNNED,PREPARE_ATTACK, DEAD }
var current_state: State = State.IDLE

var target: Node2D = null
var has_target: bool = false
var can_attack: bool = true
var random_direction_offset: Vector2

var consecutive_hits: int = 0
var consecutive_hit_timer: Timer
var stun_immunity_timer: Timer
var hurt_state_timer: Timer # NOVO: Timer para o estado HURT
var is_stun_immune: bool = false
var is_empowered_attack: bool = false
var stored_damage_for_retaliation: int = 0 # <-- ADICIONE ESTA LINHA
var is_preparing_attack: bool = false # <-- Nossa nova trava
var damage_to_retaliate: int = 0 # <-- Nossa nova variável \"snapshot\"



@onready var animated_sprite = $AnimatedSprite2D
@onready var collision_shape = $CollisionShape2D
@onready var hand_pivot = $HandPivot
@onready var attack_area: Area2D = $HandPivot/SwordArea
@onready var detection_area = $DetectionArea
@onready var audio_nodes = { \"hit\": $Audio/hit, \"attack\": $Audio/attack, \"death\": $Audio/death, \"blocked\": $Audio/blocked }


func _ready() -> void:
	set_collision_mask_value(3, false)
	health = max_health
	add_to_group(\"enemies\")
	setup_detection_area()
	
	attack_area.monitoring = false
	attack_area.body_entered.connect(_on_attack_area_body_entered)
	
	current_state = State.IDLE
	animated_sprite.play(\"idle\")
	
	random_direction_offset = Vector2(randf_range(-0.5, 0.5), 0).normalized()

	# Configuração dos Timers
	consecutive_hit_timer = Timer.new()
	consecutive_hit_timer.one_shot = true
	consecutive_hit_timer.wait_time = consecutive_hit_window
	consecutive_hit_timer.timeout.connect(_on_consecutive_hit_timer_timeout)
	add_child(consecutive_hit_timer)

	stun_immunity_timer = Timer.new()
	stun_immunity_timer.one_shot = true
	stun_immunity_timer.wait_time = stun_immunity_duration
	stun_immunity_timer.timeout.connect(_on_stun_immunity_timer_timeout)
	add_child(stun_immunity_timer)
	
	# NOVO: Configuração do Timer do estado HURT
	hurt_state_timer = Timer.new()
	hurt_state_timer.one_shot = true
	hurt_state_timer.timeout.connect(_on_hurt_state_timer_timeout)
	add_child(hurt_state_timer)


# ALTERADO: Removida a linha que tocava a animação diretamente.
# ALTERADO: Reintroduzida a chamada para tocar a animação de dano no estado STUNNED.
func take_damage(amount: int, attack_origin: Vector2) -> void:
	if current_state == State.DEAD:
		return

	# Lógica de dano simplificada
	health -= amount
	audio_nodes[\"hit\"].play()

	if health <= 0:
		die()
		return

	# Lógica de dano durante o stun (para o ataque retaliador)
	if current_state == State.STUNNED:
		stored_damage_for_retaliation += amount
		animated_sprite.play(\"hurt\")
		return

	# Lógica para contar acertos para o stun
	if not is_stun_immune:
		consecutive_hits += 1
		consecutive_hit_timer.start()
		
		if consecutive_hits >= hits_for_stun:
			consecutive_hits = 0
			consecutive_hit_timer.stop()
			start_stun()
			return

	# Lógica do estado de \"hurt\"
	current_state = State.HURT
	hurt_state_timer.start(0.3)


# ALTERADO: `perform_empowered_attack` agora toca a animação mesmo se defendido
func perform_empowered_attack() -> void:
	if not can_attack or not has_target:
		return
	
	can_attack = false
	
	# Verifica a defesa ANTES de qualquer outra coisa
	var was_defended = is_player_defending(target)

	# A lógica de ataque e animação acontece de qualquer forma
	current_state = State.ATTACK
	is_empowered_attack = true
	
	var direction = (target.global_position - global_position).normalized()
	animated_sprite.flip_h = direction.x < 0
	
	animated_sprite.play(\"attack\")
	audio_nodes[\"attack\"].play()
	
	# Só ativa a área de dano se o ataque NÃO foi defendido
	if not was_defended:
		update_attack_area_position()
		attack_area.monitoring = true
	
	await animated_sprite.animation_finished
	
	# Desliga tudo como de costume
	attack_area.monitoring = false
	is_empowered_attack = false
	
	await get_tree().create_timer(attack_cooldown).timeout
	can_attack = true


# NOVO: Função de timeout para o estado HURT
func _on_hurt_state_timer_timeout() -> void:
	# Ao final do timer, se ainda estiver em 'hurt', volta ao normal
	if current_state == State.HURT:
		current_state = State.CHASE if has_target else State.IDLE


# --- O resto do código permanece o mesmo ---

# ALTERADO: Adicionado o estado HURT à verificação inicial
func _physics_process(delta: float) -> void:
	# 1. Primeiro, aplicamos a gravidade, que afeta todos os estados.
	if not is_on_floor():
		velocity.y += gravity * delta
	else:
		# Uma pequena força para baixo para manter o personagem no chão de forma estável
		velocity.y = 5 

	# 2. Em seguida, executamos a lógica do estado atual (que definirá a velocidade X)
	process_state_logic(delta)

	# 3. Depois, atualizamos a animação com base no estado final deste frame.
	handle_animations()

	# 4. Finalmente, aplicamos o movimento.
	move_and_slide()
	
func process_state_logic(delta: float) -> void:
	match current_state:
		State.IDLE:
			velocity.x = move_toward(velocity.x, 0, move_speed) # Desacelera até parar
			if has_target and is_instance_valid(target):
				current_state = State.CHASE

		State.HURT:
			# A única tarefa deste estado é parar o inimigo.
			# A saída do estado é controlada pelo _on_hurt_state_timer_timeout.
			velocity.x = move_toward(velocity.x, 0, move_speed * 2) # Para mais rápido

		State.STUNNED:
			# Mesma coisa que HURT, mas a saída é controlada pela função start_stun
			velocity.x = move_toward(velocity.x, 0, move_speed * 2)

		State.ATTACK:
			# O ataque é controlado por sua própria função com 'await', então aqui só paramos o movimento.
			velocity.x = 0
			
		# NOVO ESTADO
		State.PREPARE_ATTACK:
			velocity.x = 0 # Fica parado enquanto carrega
			
			# Usa a trava para chamar a sequência apenas uma vez
			if not is_preparing_attack:
				is_preparing_attack = true
				_start_empowered_sequence()

		State.CHASE:
			if not has_target or not is_instance_valid(target):
				current_state = State.IDLE
				return

			var distance = global_position.distance_to(target.global_position)
			
			if distance <= attack_range and can_attack:
				start_attack() # start_attack mudará o estado para ATTACK
			else:
				# Lógica de movimento de perseguição
				var direction = (target.global_position - global_position).normalized()
				animated_sprite.flip_h = direction.x < 0
				update_attack_area_position()
				
				var separation = apply_separation_force()
				var final_direction = (direction + separation).normalized()
				velocity.x = final_direction.x * move_speed
		
		State.DEAD:
			velocity.x = 0

# ALTERADO: Lógica do estado STUNNED para evitar o loop de animação.
func handle_animations() -> void:
	match current_state:
		State.DEAD: animated_sprite.play(\"death\")
		
		State.STUNNED:
			# Se a animação 'hurt' não estiver tocando, fique na animação 'idle'.
			# Isso permite que 'hurt' toque uma vez quando acionada e depois pare.
			if animated_sprite.animation != \"hurt\" or not animated_sprite.is_playing():
				animated_sprite.play(\"idle\")

		# NOVO ESTADO DE ANIMAÇÃO
		State.PREPARE_ATTACK:
			animated_sprite.play(\"overload\")

		State.HURT: animated_sprite.play(\"hurt\")
		State.ATTACK: animated_sprite.play(\"attack\")
		State.CHASE:
			if not is_on_floor(): animated_sprite.play(\"jump\")
			elif abs(velocity.x) > 0: animated_sprite.play(\"run\")
			else: animated_sprite.play(\"idle\")
		State.IDLE:
			if not is_on_floor(): animated_sprite.play(\"jump\")
			elif abs(velocity.x) > 0: animated_sprite.play(\"run\")
			else: animated_sprite.play(\"idle\")

func is_player_defending(player: Node2D) -> bool:
	var player_sprite = player.get_node_or_null(\"AnimatedSprite2D\")
	if not player_sprite:
		return false

	var direction_to_player_x = (player.global_position - global_position).x
	var player_is_facing_left = player_sprite.flip_h
	
	if direction_to_player_x > 0 and not player_is_facing_left:
		return true
		
	if direction_to_player_x < 0 and player_is_facing_left:
		return true

	return false

# ALTERADO: Adicionada verificação de 'target' para mais robustez
func start_stun() -> void:
	current_state = State.STUNNED
	# NÃO zeramos o stored_damage aqui, pois o golpe que causa o stun ainda não foi processado
	
	# Espera o tempo do stun passar. É aqui que o jogador pode atacar para acumular dano.
	await get_tree().create_timer(stun_duration).timeout
	
	# O stun acabou. Agora, \"congelamos\" o valor do dano acumulado.
	damage_to_retaliate = stored_damage_for_retaliation
	stored_damage_for_retaliation = 0 # Zeramos o acumulador para o próximo ciclo
	
	# Só contra-ataca se ainda for válido
	if health > 0 and current_state == State.STUNNED and is_instance_valid(target):
		# Toca a animação de overload para sinalizar o ataque
		animated_sprite.play(\"overload\")
		
		# Espera um frame para garantir que a animação \"overload\" seja desenhada na tela
		await get_tree().process_frame
		
		# Chama o ataque fortalecido
		await perform_empowered_attack()
		
		is_stun_immune = true
		stun_immunity_timer.start()
		
		current_state = State.CHASE if has_target else State.IDLE

	elif health > 0:
		current_state = State.IDLE

func _on_consecutive_hit_timer_timeout() -> void:
	consecutive_hits = 0

func _on_stun_immunity_timer_timeout() -> void:
	is_stun_immune = false

func _on_attack_area_body_entered(body: Node2D) -> void:
	if body.is_in_group(\"player\") and current_state == State.ATTACK:
		var damage_to_deal = base_attack_damage
		
		if is_empowered_attack:
			# Verifica a variável \"congelada\"
			if damage_to_retaliate > 0:
				damage_to_deal = damage_to_retaliate
			else:
				damage_to_deal *= 2
			
			# Zera a variável após o uso
			damage_to_retaliate = 0
		
		body.take_damage(damage_to_deal, global_position)

func handle_combat() -> void:
	if not is_instance_valid(target):
		has_target = false
		current_state = State.IDLE
		return

	var direction = (target.global_position - global_position).normalized()
	var distance = global_position.distance_to(target.global_position)
	animated_sprite.flip_h = direction.x < 0
	update_attack_area_position()

	if distance <= attack_range and can_attack:
		start_attack()
	else:
		current_state = State.CHASE
		var separation = apply_separation_force()
		var final_direction = (direction.normalized() + separation).normalized()
		velocity.x = final_direction.x * move_speed

func start_attack() -> void:
	if !can_attack: return
	can_attack = false
	current_state = State.ATTACK
	await get_tree().create_timer(0.15).timeout
	audio_nodes[\"attack\"].play()
	update_attack_area_position()
	attack_area.monitoring = true
	await animated_sprite.animation_finished
	attack_area.monitoring = false
	if current_state == State.ATTACK:
		current_state = State.CHASE if has_target else State.IDLE
	await get_tree().create_timer(attack_cooldown).timeout
	can_attack = true

func apply_separation_force() -> Vector2:
	var separation_force = Vector2.ZERO
	var enemies = get_tree().get_nodes_in_group(\"enemies\")
	for other in enemies:
		if other == self or not other is CharacterBody2D or other.current_state == State.HURT:
			continue
		var distance = global_position.distance_to(other.global_position)
		if distance < separation_distance and distance > 0:
			var push_dir = (global_position - other.global_position).normalized()
			var strength = (separation_distance - distance) / separation_distance
			separation_force += push_dir * strength
	return separation_force.normalized() * separation_strength

func setup_detection_area() -> void:
	var shape = CircleShape2D.new()
	shape.radius = detection_range
	detection_area.get_node(\"CollisionShape2D\").shape = shape
	detection_area.body_entered.connect(_on_detection_area_body_entered)

func update_attack_area_position() -> void:
	var offset = Vector2(attack_range * 0.8, 0)
	attack_area.position = offset if not animated_sprite.flip_h else -offset

func die() -> void:
	current_state = State.DEAD
	audio_nodes[\"death\"].play()
	collision_shape.set_deferred(\"disabled\", true)
	animated_sprite.play(\"death\")
	await animated_sprite.animation_finished
	queue_free()

func _on_detection_area_body_entered(body: Node2D) -> void:
	if body.is_in_group(\"player\"):
		target = body
		has_target = true
		if current_state != State.STUNNED and current_state != State.ATTACK:
			current_state = State.CHASE
			
# Adicione esta nova função em qualquer lugar do seu script

# Esta é a versão CORRETA para Godot 4
func _start_empowered_sequence() -> void:
	# USA \"await\"
	await get_tree().create_timer(0.5).timeout
	
	if current_state == State.PREPARE_ATTACK:
		# USA \"await\"
		await perform_empowered_attack()
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_opd48"]
size = Vector2(388, 335)

[sub_resource type="SpriteFrames" id="SpriteFrames_iv7se"]
animations = [{
"frames": [{
"duration": 7.0,
"texture": ExtResource("1_q7yxd")
}, {
"duration": 7.0,
"texture": ExtResource("2_ylfv4")
}, {
"duration": 7.0,
"texture": ExtResource("3_k3021")
}, {
"duration": 7.0,
"texture": ExtResource("4_x6d8k")
}, {
"duration": 7.0,
"texture": ExtResource("5_wm0mg")
}],
"loop": false,
"name": &"attack",
"speed": 22.0
}, {
"frames": [{
"duration": 5.0,
"texture": ExtResource("6_b8emp")
}, {
"duration": 5.0,
"texture": ExtResource("7_i4mw0")
}, {
"duration": 5.0,
"texture": ExtResource("8_qqmo1")
}, {
"duration": 5.0,
"texture": ExtResource("9_fr7mf")
}, {
"duration": 5.0,
"texture": ExtResource("10_5xaq3")
}],
"loop": false,
"name": &"death",
"speed": 30.0
}, {
"frames": [{
"duration": 3.0,
"texture": ExtResource("11_qwx3j")
}, {
"duration": 3.0,
"texture": ExtResource("12_vhb0b")
}, {
"duration": 3.0,
"texture": ExtResource("13_ryacq")
}],
"loop": false,
"name": &"hurt",
"speed": 30.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("14_fotv0")
}, {
"duration": 1.0,
"texture": ExtResource("15_hn13c")
}, {
"duration": 1.0,
"texture": ExtResource("16_nn4lk")
}, {
"duration": 1.0,
"texture": ExtResource("17_hi1yf")
}],
"loop": false,
"name": &"idle",
"speed": 8.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("18_tq22t")
}, {
"duration": 1.0,
"texture": ExtResource("19_tkfor")
}, {
"duration": 1.0,
"texture": ExtResource("20_fycgf")
}, {
"duration": 1.0,
"texture": ExtResource("21_1cxax")
}, {
"duration": 1.0,
"texture": ExtResource("22_6h4t2")
}, {
"duration": 1.0,
"texture": ExtResource("23_vagby")
}],
"loop": true,
"name": &"jump",
"speed": 5.0
}, {
"frames": [{
"duration": 10.0,
"texture": ExtResource("24_ylfv4")
}],
"loop": true,
"name": &"overload",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("24_bh1vv")
}, {
"duration": 1.0,
"texture": ExtResource("25_qkccf")
}, {
"duration": 1.0,
"texture": ExtResource("26_otdhl")
}, {
"duration": 1.0,
"texture": ExtResource("27_g2kfy")
}],
"loop": false,
"name": &"run",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_e5e7g"]
size = Vector2(454.398, 342)

[sub_resource type="CircleShape2D" id="CircleShape2D_e5e7g"]
radius = 641.05

[node name="Crow" type="CharacterBody2D"]
collision_layer = 4
collision_mask = 2
script = SubResource("GDScript_4g3ns")
max_health = 200
move_speed = 100.0
attack_range = 230.0
hits_for_stun = 2
consecutive_hit_window = 2.0
stun_immunity_duration = 3.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(129, -178.5)
shape = SubResource("RectangleShape2D_opd48")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(101.252, -174.5)
scale = Vector2(13.7748, 11.7586)
sprite_frames = SubResource("SpriteFrames_iv7se")
animation = &"overload"

[node name="Audio" type="Node2D" parent="."]
position = Vector2(-11, -9)

[node name="hit" type="AudioStreamPlayer2D" parent="Audio"]
position = Vector2(-9, -8)
stream = ExtResource("28_2bl2v")

[node name="attack" type="AudioStreamPlayer2D" parent="Audio"]
stream = ExtResource("29_mkmmk")
volume_db = 24.0

[node name="death" type="AudioStreamPlayer2D" parent="Audio"]
stream = ExtResource("30_eo6x7")
volume_db = 3.888

[node name="HandPivot" type="Node2D" parent="."]
position = Vector2(0, -20)
scale = Vector2(1.08, 1)

[node name="SwordArea" type="Area2D" parent="HandPivot"]
position = Vector2(129.63, -110)
collision_layer = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="HandPivot/SwordArea"]
position = Vector2(36.6898, -45)
shape = SubResource("RectangleShape2D_e5e7g")

[node name="DetectionArea" type="Area2D" parent="."]
position = Vector2(135, -144)

[node name="CollisionShape2D" type="CollisionShape2D" parent="DetectionArea"]
position = Vector2(-13, -1)
shape = SubResource("CircleShape2D_e5e7g")
metadata/_edit_lock_ = true
